generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String
  name          String
  role          UserRole @default(USER)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  subscription  Subscription?
  strategies    Strategy[]
  analyses      Analysis[]
  results       Result[]
}

model Subscription {
  id            String            @id @default(uuid())
  userId        String            @unique
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  status        SubscriptionStatus @default(ACTIVE)
  planType      String            @default("PREMIUM")
  startDate     DateTime          @default(now())
  endDate       DateTime?
  amount        Float             @default(97.00)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Strategy {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  leagues       String[]
  minOdds       Float?
  maxOdds       Float?
  betType       String[]
  minGames      Int?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  analyses      Analysis[]
}

model Analysis {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategyId    String
  strategy      Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  
  matchId       String
  league        String
  homeTeam      String
  awayTeam      String
  prediction    String
  odds          Float
  confidence    Float
  matchDate     DateTime
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  result        Result?
}

model Result {
  id            String       @id @default(uuid())
  analysisId    String       @unique
  analysis      Analysis     @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  outcome       ResultOutcome
  finalScore    String?
  profit        Float?
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

enum ResultOutcome {
  WIN
  LOSS
  PENDING
}
